This readme is for experts only!

It shows how boost libraries are extracted and what minor patch is
created/applied.


diff -Naur boost_1_53_0 boost_1_53_0.atomicPatch > boostAtomicUseEpicsMutex.patch
# patches subdirectory contains all the patches agains clean boost distribution

cd $BOOST_ROOT/..
patch -p0 < boostAtomicUseEpicsMutex.patch

cd $BOOST_ROOT
./bootstrap
cd tools/bcp
../../b2
cd ../..
$BOOST_ROOT/dist/bin/bcp --boost=$BOOST_ROOT \
    `ls -1 boost/tr1/*.hpp | grep -v regex | xargs` \
    boost/circular_buffer.hpp boost/move/move.hpp boost/lockfree/*.hpp \
    boost/test/unit_test.hpp boost/atomic.hpp build $BOOST_OUTPUT_DIR


Boost.Random has a binary component which is only needed if you're using
random_device.

Boost.Test can be used in 'header-only' or 'separately compiled' mode,
although separate compilation is recommended for serious use.

Boost.Atomic has one cpp in case of no-lockfree support.

Boost.Build was added in case somebody would like to build anything...


How to update the INC lists in boostApp/Makefile
------------------------------------------------

 1. Starting from clean (unbuilt) versions of the pvCommon and pvData
    V4 source modules, edit the pvCommon/configure/CONFIG_SITE file and
    uncomment the WITH_ALL_BOOST definition. Leave WITH_MICROBENCH
    commented for now.
 2. Run 'make' in pvCommon, with all cross-architectures enabled.
 3. In pvCommon, run this search (checks all non-boost .d files)
        grep -r -h include/boost mbSrc testApp | sort -u > ../boost-files
 4. Run 'make' in pvData, as above.
 5. In pvData, run this search (checks all .d files)
        grep -r -h include/boost * | sort -u >> ../boost-files
    The pvAccess, pvaSrv and pvDatabase modules don't currently use
    any extra parts of boost so don't need to be examined.
 6. Edit the boost-files list and ensure every header is on its own
    line. Remove any references to target (.o/obj) files and to any
    header files that are not part of boost.
 7. For each file listed, replace everything up to and including the
    /include/ part of the filename with "INC += ". Delete the trailing
    space and back-slash from the end of each line. Filter the resulting
    list through "sort -u" to remove duplicates.
 8. Edit the pvCommon/boostApp/Makefile and replace the INC list that
    appears above the "ifdef WITH_MICROBENCH" with the new list.
 9. It may be necessary to manually add the following headers, which are
    needed for VxWorks targets but somehow don't get included in the
    list of dependencies generated:
        INC += boost/exception/detail/attribute_noreturn.hpp
        INC += boost/exception/exception.hpp
10. Edit the pvCommon/configure/CONFIG_SITE file again and uncomment the
    WITH_MICROBENCH definition. Delete the boost-files list.
11. Repeat steps 2 through 7, which will generate a longer list of
    headers needed when micro-benchmarking is included.
12. If possible, use diff to compare this list with the one created
    above and remove the files already added from the new list.
13. Edit the pvCommon/boostApp/Makefile and replace the INC list that
    appears below the "ifdef WITH_MICROBENCH" with the new list.
14. Edit the pvCommon/configure/CONFIG_SITE file again and comment out
    both definitions.
15. Run 'make uninstall rebuild' in pvCommon and pvData to ensure that
    both modules still build with only the limited set of boost headers
    installed.
16. Edit the pvCommon/configure/CONFIG_SITE file again and uncomment the
    WITH_MICROBENCH definition.
17. Run 'make uninstall rebuild' in pvCommon and pvData to ensure that
    both modules build with the longer of boost headers installed when
    micro-benchmarking is enabled.

If the builds in steps 15 or 17 fail, there may be additional headers
needed which are not listed as dependency files (the two files listed in
step 9 above were discovered this way). These can be tracked down by
running the failing compile stage through the C preprocessor to create a
.ii file (pre-processed C++ source) and examining all of the filenames
in the linemarkers inserted into that file.
